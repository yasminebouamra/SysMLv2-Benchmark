```
**Configuration Package:**

```
port PublicationPort
port SubscriptionPort

part producer {
  attribute topic : String
  item publication
  port publicationPort : ~PublicationPort
  perform action publish {
    action send Publish(topic, publication) via publicationPort
  }
}

interface producer.publicationPort to server.publicationPort {
  bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf
}

part server {
  port publicationPort : PublicationPort
  port subscriptionPort : SubscriptionPort
  exhibit state serverBehavior {
    entry; then waitForSubscription
    state waitForSubscription
    transition subscribing
      first waitForSubscription
      accept sub : Subscribe via subscriptionPort
      then waitForPublication
    state waitForPublication
    transition delivering
      first waitForPublication
      accept pub : Publish via publicationPort
      if pub.topic == subscribing.sub.topic
      do send Deliver(pub.publication) to subscribing.sub.subscriber
      then waitForPublication
  }
}

interface consumer.subscriptionPort to server.subscriptionPort {
  bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf
}

part consumer {
  attribute topic : String
  port subscriptionPort : ~SubscriptionPort
  perform action consumerBehavior {
    action subscribe send Subscribe(topic, consumer) to server
    then action delivery accept Deliver via consumer
  }
}
```

**Realization Package:**

```
part realization : PubSubSequence {
  part :>> producer :> producer {
    event publish[1] :>> publish_source_event
  }

  part :>> server :> server {
    event subscribing.accepter[1] :>> subscribe_target_event
    event delivering.accepter[1] :>> publish_target_event
    event delivering.effect[1] :>> deliver_source_event
  }

  part :>> consumer :> consumer {
    event subscribe[1] :>> subscribe_source_event
    event delivery[1] :>> deliver_target_event
  }

  message :>> publish_message: Transfers::MessageTransfer {
    end :>> source = producer.publicationPort
    end :>> target = server.publicationPort
  }

  message :>> subscribe_message: Transfers::MessageTransfer {
    end :>> source = consumer.subscriptionPort
    end :>> target = server.subscriptionPort
  }

  message :>> deliver_message: Transfers::MessageTransfer {
    end :>> source = server
    end :>> target = consumer
  }

  /* Binding sent/accept messages to specification model messages. */
  bind producer.publish.sentMessage = publish_message
  bind consumer.subscribe.sentMessage = subscribe_message
  bind server.delivering.effect.sentMessage = deliver_message

  bind consumer.delivery.acceptedMessage = subscribe_message
  bind server.subscribing.accepter.acceptedMessage = subscribe_message
  bind server.delivering.accepter.acceptedMessage = publish_message
}
```