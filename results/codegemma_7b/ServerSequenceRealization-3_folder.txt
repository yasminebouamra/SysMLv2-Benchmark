```sysmlv2
import ServerSequenceModelOutside::*;
import Configuration::*;

package Configuration {
    port def PublicationPort;
    port def SubscriptionPort;

    part producer {
        attribute topic : String;
        private item publication;
        perform action publish send Publish(topic, publication) via publicationPort;
        port publicationPort : ~PublicationPort;
    }

    part server {
        port publicationPort : PublicationPort;
        port subscriptionPort : SubscriptionPort;
        exhibit state serverBehavior {
            entry; then waitForSubscription;
            state waitForSubscription;
            transition subscribing
                first waitForSubscription
                accept sub : Subscribe via subscriptionPort
                then waitForPublication;
            state waitForPublication;
            transition delivering
                first waitForPublication
                accept pub : Publish via publicationPort
                if pub.topic == subscribing.sub.topic
                do send Deliver(pub.publication) to subscribing.sub.subscriber
                then waitForPublication;
        }
    }

    part consumer {
        attribute topic : String;
        port subscriptionPort : ~SubscriptionPort;
        perform action subscribe send Subscribe(topic, consumer) to server;
        then action delivery accept Deliver via consumer;
    }

    interface producer.publicationPort to server.publicationPort {
        bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf;
    }

    interface consumer.subscriptionPort to server.subscriptionPort {
        bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf;
    }
}

part realization : PubSubSequence {
    part :>> producer :> producer;
    part :>> server :> server;
    part :>> consumer :> consumer;

    message :>> publish_message: Transfers::MessageTransfer {
        end :>> source = producer.publicationPort;
        end :>> target = server.publicationPort;
    }
    message :>> subscribe_message: Transfers::MessageTransfer {
        end :>> source = consumer.subscriptionPort;
        end :>> target = server.subscriptionPort;
    }
    message :>> deliver_message: Transfers::MessageTransfer {
        end :>> source = server;
        end :>> target = consumer;
    }

    bind producer.publish.sentMessage = publish_message;
    bind consumer.subscribe.sentMessage = subscribe_message;
    bind server.delivering.effect.sentMessage = deliver_message;
    bind consumer.delivery.acceptedMessage = subscribe_message;
    bind server.subscribing.accepter.acceptedMessage = subscribe_message;
    bind server.delivering.accepter.acceptedMessage = publish_message;
}
```