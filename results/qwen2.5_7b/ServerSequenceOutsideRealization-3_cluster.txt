```sysmlv2
package PublishSubscribeSystem {
	public import Transfers::*;
	
	participant producer_2[1] {
		attribute someTopic : String;
		private item somePublication;
		:>> incomingTransferSort = Occurrences::earlierFirstIncomingTransferSort;
		
		port publicationPort : ~PublicationPort;
		
		perform action producerBehavior {
			action publish send Publish(someTopic, somePublication) via publicationPort;
		}
	}
	
	interface producer_2.publicationPort to server_2.publicationPort {
		bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf;
	}
	
	participant server_2[1] {
		port publicationPort : PublicationPort;
		port subscriptionPort : SubscriptionPort;
		:>> incomingTransferSort = Occurrences::earlierFirstIncomingTransferSort;
		
		exhibit state serverBehavior {
			entry; then waitForSubscription;
			
			state waitForSubscription;
			transition subscribing
				first waitForSubscription
				accept sub : Subscribe via subscriptionPort
				then waitForPublication;
				
			state waitForPublication;
			transition delivering
				first waitForPublication
				accept pub : Publish via publicationPort
				if pub.topic == subscribing.sub.topic
				do send Deliver(pub.publication) to subscribing.sub.subscriber
				then waitForPublication;
		}
	}
	
	interface server_2.subscriptionPort to consumer_2.subscriptionPort {
		bind source::outgoingTransfersFromSelf = target::incomingTransfersToSelf;
	}
	
	participant consumer_2[1] {
		attribute myTopic : String;
		:>> incomingTransferSort = Occurrences::earlierFirstIncomingTransferSort;
		
		port subscriptionPort : ~SubscriptionPort;
		
		perform action consumerBehavior {
			action subscribe send Subscribe(myTopic, consumer_2) to server_2;
			then action delivery accept Deliver via consumer_2;
		}
	}
	
	participant realization_2 : PubSubSequence {
		part :>> producer :> producer_2;
		part :>> server :> server_2;
		part :>> consumer :> consumer_2;

		message :>> publish_message: Transfers::MessageTransfer {
 			end :>> source = producer.publicationPort;
 			end :>> target = server.publicationPort;
 		}
		message :>> subscribe_message: Transfers::MessageTransfer {
 			end :>> source = consumer.subscriptionPort;
 			end :>> target = server.subscriptionPort;
 		}
		message :>> deliver_message: Transfers::MessageTransfer {
 			end :>> source = server;
 			end :>> target = consumer;
 		}
 		
 		bind producer_2.producerBehavior.publish.sentMessage = publish_message;
 		bind consumer_2.consumerBehavior.subscribe.sentMessage = subscribe_message;
 		bind server_2.serverBehavior.delivering.effect.sentMessage = deliver_message;
 		  bind consumer_2.consumerBehavior.delivery.acceptedMessage = subscribe_message;
 		bind server_2.serverBehavior.subscribing.accepter.acceptedMessage = subscribe_message;
 		bind server_2.serverBehavior.delivering.accepter.acceptedMessage = publish_message;
	}
	
	participant PubSubSequenceOutside :> PubSubSequence {
		part :>> producer {
			event publish_source_event = publish_message.start;
		}
		
		part :>> server {
			event occurrence :>> subscribe_target_event = subscribe_message.done;
			then event occurrence :>> publish_target_event = publish_message.done;
			then event occurrence :>> deliver_source_event = deliver_message.start;
		}
		
		part :>> consumer {
			event occurrence :>> subscribe_source_event = subscribe_message.start;
			then event occurrence :>> deliver_target_event = deliver_message.done;
		}
	}
}
```